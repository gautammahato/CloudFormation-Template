{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This  VPC environment refer to three availability zones , three public and private subnets with an ubuntu 20.04 ec2 instance. it can be use all region",
  "Parameters": {
    "envPrefix": {
      "Description": "Environment name prefix.",
      "Type": "String",
      "Default": "DemoCf"
    },
    "CfvpcCidr": {
      "Description": "VPC CIDR block.",
      "Type": "String",
      "Default": "10.0.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Enter valid ip CIDR_block range of the form x.x.x.x/x."
    },
    "publicSubnet1Cidr": {
      "Description": "Public subnet 1 CIDR_block.",
      "Type": "String",
      "Default": "10.0.0.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Enter valid ip CIDR_block range of the form x.x.x.x/x and subnet of VPC."
    },
    "privateSubnet1Cidr": {
      "Description": "Private subnet 1 CIDR_block.",
      "Type": "String",
      "Default": "10.0.1.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Enter valid ip CIDR_block range of the form x.x.x.x/x and subnet of VPC."
    },
    "publicSubnet2Cidr": {
      "Description": "Public subnet 2 CIDR block.",
      "Type": "String",
      "Default": "10.0.2.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Enter valid ip CIDR_block range of the form x.x.x.x/x and subnet of VPC."
    },
    "privateSubnet2Cidr": {
      "Description": "Private subnet 2 CIDR block.",
      "Type": "String",
      "Default": "10.0.3.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Enter valid ip CIDR_block range of the form x.x.x.x/x and subnet of VPC."
    },
    "publicSubnet3Cidr": {
      "Description": "Public subnet 2 CIDR block.",
      "Type": "String",
      "Default": "10.0.4.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Enter valid ip CIDR_block range of the form x.x.x.x/x and subnet of VPC."
    },
    "privateSubnet3Cidr": {
      "Description": "Private subnet 2 CIDR block.",
      "Type": "String",
      "Default": "10.0.5.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Enter valid ip CIDR_block range of the form x.x.x.x/x and subnet of VPC."
    },
    "AzA": {
      "Description": "Availability zone a.",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "AzB": {
      "Description": "Availability zone b.",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "AzC": {
      "Description": "Availability zone b.",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type for the NAT instance. This instance will be put on public subnet 1.",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "t3.nano",
        "t3.micro",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
        "t3a.nano",
        "t3a.micro",
        "t3a.small",
        "t3a.medium",
        "t3a.large",
        "t3a.xlarge",
        "t3a.2xlarge",
        "t4g.nano",
        "t4g.micro",
        "t4g.small",
        "t4g.medium",
        "t4g.large",
        "t4g.xlarge",
        "t4g.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m5.8xlarge",
        "m5.12xlarge",
        "m5.16xlarge",
        "m5.24xlarge",
        "m5.metal",
        "m5a.large",
        "m5a.xlarge",
        "m5a.2xlarge",
        "m5a.4xlarge",
        "m5a.8xlarge",
        "m5a.12xlarge",
        "m5a.16xlarge",
        "m5a.24xlarge"
      ]
    },
    "SshAccessCidr": {
      "Description": "IP CIDR from where you could SSH into instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to  instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    }
  },
  "Mappings": {
    "instanceAmi": {
      "us-east-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "us-east-2": {
        "AMI": "ami-09744628bed84e434"
      },
      "us-west-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "us-west-2": {
        "AMI": "ami-09744628bed84e434"
      },
      "ap-south-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "ap-northeast-3": {
        "AMI": "ami-09744628bed84e434"
      },
      "ap-northeast-2": {
        "AMI": "ami-09744628bed84e434"
      },
      "ap-southeast-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "ap-southeast-2": {
        "AMI": "ami-09744628bed84e434"
      },
      "ap-northeast-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "ca-central-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "eu-central-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "eu-west-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "eu-west-2": {
        "AMI": "ami-09744628bed84e434"
      },
      "eu-west-3": {
        "AMI": "ami-09744628bed84e434"
      },
      "eu-north-1": {
        "AMI": "ami-09744628bed84e434"
      },
      "sa-east-1": {
        "AMI": "ami-09744628bed84e434"
      }
    }
  },
  "Resources": {
    "vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "CfvpcCidr"
        },
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "VPC"
                ]
              ]
            }
          }
        ]
      }
    },
    "publicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "CidrBlock": {
          "Ref": "publicSubnet1Cidr"
        },
        "AvailabilityZone": {
          "Ref": "AzA"
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "Subnet-Public-1"
                ]
              ]
            }
          }
        ]
      }
    },
    "privateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "CidrBlock": {
          "Ref": "privateSubnet1Cidr"
        },
        "AvailabilityZone": {
          "Ref": "AzA"
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "Subnet-Private-1"
                ]
              ]
            }
          }
        ]
      }
    },
    "publicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "CidrBlock": {
          "Ref": "publicSubnet2Cidr"
        },
        "AvailabilityZone": {
          "Ref": "AzB"
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "Subnet-Public-2"
                ]
              ]
            }
          }
        ]
      }
    },
    "privateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "CidrBlock": {
          "Ref": "privateSubnet2Cidr"
        },
        "AvailabilityZone": {
          "Ref": "AzB"
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "Subnet-Private-2"
                ]
              ]
            }
          }
        ]
      }
    },
    "publicSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "CidrBlock": {
          "Ref": "publicSubnet3Cidr"
        },
        "AvailabilityZone": {
          "Ref": "AzC"
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "Subnet-Public-3"
                ]
              ]
            }
          }
        ]
      }
    },
    "privateSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "CidrBlock": {
          "Ref": "privateSubnet3Cidr"
        },
        "AvailabilityZone": {
          "Ref": "AzC"
        },
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "Subnet-Private-3"
                ]
              ]
            }
          }
        ]
      }
    },
    "inetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": [
        "vpc"
      ],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "InternetGateway"
                ]
              ]
            }
          }
        ]
      }
    },
    "attachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": [
        "vpc",
        "inetGateway"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "InternetGatewayId": {
          "Ref": "inetGateway"
        }
      }
    },
    "rtbPublic": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "RTB-Public"
                ]
              ]
            }
          }
        ]
      }
    },
    "routePublic": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "rtbPublic"
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtbPublic"
        },
        "GatewayId": {
          "Ref": "inetGateway"
        }
      },
      "DependsOn": "attachGateway"
    },
    "subnetRouteTableAssociationPublic1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "rtbPublic",
        "publicSubnet1"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "rtbPublic"
        },
        "SubnetId": {
          "Ref": "publicSubnet1"
        }
      }
    },
    "subnetRouteTableAssociationPublic2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "rtbPublic",
        "publicSubnet2"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "rtbPublic"
        },
        "SubnetId": {
          "Ref": "publicSubnet2"
        }
      }
    },
    "subnetRouteTableAssociationPublic3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "rtbPublic",
        "publicSubnet3"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "rtbPublic"
        },
        "SubnetId": {
          "Ref": "publicSubnet3"
        }
      }
    },
    "rtbPrivateA": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": [
        "vpc"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "RTB-Private-Az-a"
                ]
              ]
            }
          }
        ]
      }
    },
    "rtbPrivateB": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": [
        "vpc"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "RTB-Private-Az-b"
                ]
              ]
            }
          }
        ]
      }
    },
    "rtbPrivateC": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": [
        "vpc"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "RTB-Private-Az-c"
                ]
              ]
            }
          }
        ]
      }
    },
    "subnetRouteTableAssociationPrivate1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "rtbPublic",
        "privateSubnet1"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "rtbPrivateA"
        },
        "SubnetId": {
          "Ref": "privateSubnet1"
        }
      }
    },
    "subnetRouteTableAssociationPrivate2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "rtbPublic",
        "privateSubnet2"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "rtbPrivateB"
        },
        "SubnetId": {
          "Ref": "privateSubnet2"
        }
      }
    },
    "subnetRouteTableAssociationPrivate3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "rtbPublic",
        "privateSubnet3"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "rtbPrivateC"
        },
        "SubnetId": {
          "Ref": "privateSubnet3"
        }
      }
    },
    "Ec2Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "vpc",
        "attachGateway",
        "publicSubnet1",
        "InstanceSg"
      ],
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "instanceAmi",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Monitoring": "false",
        "SourceDestCheck": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "Server"
                ]
              ]
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "publicSubnet1"
            },
            "GroupSet": [
              {
                "Ref": "InstanceSg"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },
    "InstanceSg": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": [
        "vpc",
        "attachGateway"
      ],
      "Properties": {
        "GroupDescription": "This Security group for instances",
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "ec2Sg"
                ]
              ]
            }
          }
        ]
      }
    },
    "routePrivate": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtbPrivateA"
        },
        "InstanceId": {
          "Ref": "Ec2Instance"
        }
      }
    },
    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 20,
        "HealthyThresholdCount": 5,
        "IpAddressType": "ipv4",
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "envPrefix"
              },
              "Tg"
            ]
          ]
        },
        "Port": 80,
        "Protocol": "HTTP",
        "ProtocolVersion": "HTTP1",
        "TargetType": "instance",
        "UnhealthyThresholdCount": 5,
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "IpAddressType": "ipv4",
        "Scheme": "internet-facing",
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "envPrefix"
              },
              "ApplicationLoadBalancer"
            ]
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSg"
          }
        ],
        "Subnets": [
          {
            "Ref": "publicSubnet1"
          },
          {
            "Ref": "publicSubnet2"
          },
          {
            "Ref": "publicSubnet3"
          }
        ],
        "Type": "application"
      }
    },
    "albListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ALBTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ELB"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "myLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "envPrefix"
              },
              "LaunchTemplate"
            ]
          ]
        },
        "LaunchTemplateData": {
          "ImageId": {
            "Fn::FindInMap": [
              "instanceAmi",
              {
                "Ref": "AWS::Region"
              },
              "AMI"
            ]
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "SecurityGroupIds": [
            {
              "Ref": "InstanceSg"
            }
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "environment",
                  "Value": "development"
                }
              ]
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "environment",
                  "Value": "development"
                }
              ]
            }
          ]
        }
        
      }
    },
    "MyAppAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName" : {"Fn::Join":["",[{"Ref": "envPrefix"},"AutoScalingGroup"]]},
        "LaunchTemplate": {
          "LaunchTemplateId": {"Ref": "myLaunchTemplate"},
          "Version": { "Fn::GetAtt": [ "myLaunchTemplate", "LatestVersionNumber" ] }
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "publicSubnet1"
          },
          {
            "Ref": "publicSubnet2"
          },
          {
            "Ref": "publicSubnet3"
          }
        ],
        "MinSize": "1",
        "MaxSize": "2",
       
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "envPrefix"
                  },
                  "AutoscalingGroup"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "MyAppAutoScalingGroup"
        },
        "Cooldown": "20",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "MyAppAutoScalingGroup"
        },
        "Cooldown": "20",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 40% for 1 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "40",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "MyAppAutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU <20% for 1 min",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "20",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "MyAppAutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    }







  }
}